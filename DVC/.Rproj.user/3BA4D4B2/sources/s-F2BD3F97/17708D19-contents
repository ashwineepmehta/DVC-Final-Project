# Homework 3  #####

## Importing Libraries ####
library(ggplot2)
library(dplyr)

## Question # 1 ####
## 1.1	MODIFY THE FOLLOWING PLOT SO THAT 
## YOU GET ONE BOXPLOT PER INTEGER VALUE OF DISPL. 
## GGPLOT(MPG, AES(DISPL, CTY)) + GEOM BOXPLOT()

unique(mpg$cyl)
### Original Code ####
ggplot(mpg, aes(displ, cty)) + 
  geom_boxplot()

### Modified Code - Method # 1 ####
# Add group aesthetic to geometry mapping clause 
ggplot(mpg, aes(displ, cty)) + 
  geom_boxplot(data = mpg, mappin =aes(group=displ))

### Modified Code - Method # 2 ####
# Add group aesthetic to ggplot mapping clause
ggplot(mpg, aes(x=displ, y= cty, group = displ)) + 
  geom_boxplot()


## Question # 2 ####
# When illustrating the difference between mapping 
# continuous and discrete colors to a line, the discrete 
# example needed aes(group = 1). 
# Why? 
# What happens if that is omitted? 
# What’s the difference between aes(group = 1) 
#   and aes(group = 2)? Why?

### Q2: Original Code #### 
df <- data.frame(x = 1:3, y = 1:3, colour = c(1,3,5))
ggplot(df, aes(x, y, colour = factor(colour))) + 
  geom_line(aes(group = 1), size = 2) +
  geom_point(size = 5)

### Why? ####
# This will ask ggplot2 to override the default setting of 
# using the combination of all categorical variables 
# in the plot to group geoms and create only one group 
ggplot(df, aes(x, y, colour = factor(colour))) + 
  geom_line(aes(group = 1), size = 2) +
  geom_point(size = 5)

### What happens if that is omitted? ####
# use the default setting - 3 groups one for each color
# value. This will ask geom to draw line per group.
# as we only have one dot per group per line, we will see
# three dots
ggplot(df, aes(x, y, colour = factor(colour))) + 
  geom_line( size = 2) +
  geom_point(size = 5)

### What’s the difference between aes(group = 1) ####
#   and aes(group = 2)? Why?
ggplot(df, aes(x, y, colour = factor(colour))) + 
  geom_line(aes(group = 2), size = 2) +
  geom_point(size = 5)


ggplot(df, aes(x, y, colour = factor(colour))) + 
  geom_line(aes(group = c(1,2,3)), size = 2) +
  geom_point(size = 5)

## Question # 3 ####
# How many bars are in each of the following plots? 
# (Hint: try adding an outline around each
# bar with color = "white")


### Graph # 1 ####
unique(mpg$drv)
ggplot(mpg, aes(drv)) +
  geom_bar(mapping = aes(color = "white")) +
  labs(title = "HW3 - Q3 - Graph # 1", subtitle = "Using defualt grouping settings")


### Graph # 2 ####
unique(mpg$hwy)
length(unique(mpg$hwy))
ggplot(mpg, aes(drv, fill = hwy, group = hwy)) +
  geom_bar(mapping = aes(colour="white")) +
  labs(title = "HW3 - Q3 - Graph # 2", subtitle = "Group = hwy")

### Calculate # of bars ####

# Create data frame based on drv and hwy variables
# to calculate all possible comibations
graph2df <- data.frame(table(mpg$drv,mpg$hwy) )

# Rename columns
names(graph2df)[1] <- "drv"
names(graph2df)[2] <- "hwy"
names(graph2df)[3] <- "count"

# Remove any combination with Zero count
graph2df<- subset(graph2df,graph2df$count>0)

# Aggregate final results
graph2df_agg <- graph2df %>% group_by(drv) %>% summarise(n=n())

# Display results
graph2df_agg



### Graph # 3 ####
mpg2 <- mpg %>% arrange(hwy) %>% mutate(id = seq_along(hwy))

unique(mpg2$id)
length(unique(mpg2$id))
ggplot(mpg2, aes(drv, fill = hwy, group = id)) +
  geom_bar(mapping = aes(color = "white")) +
  labs(title = "HW3 - Q3 - Graph # 3", subtitle = "Group = id")

# Create data frame based on drv and ID variables
# to calculate all possible combinations
graph3df <- data.frame(table(mpg2$drv,mpg2$id) )

# Rename columns
names(graph3df)[1] <- "drv"
names(graph3df)[2] <- "id"
names(graph3df)[3] <- "count"

# Remove any combination with Zero count
graph3df<- subset(graph3df,graph3df$count>0)

# Aggregate final results
graph3df_agg <- graph3df %>% group_by(drv) %>% summarise(n=n())

# Display results
graph3df_agg

## Question # 4 ####
# What happens when you put the geom smooth() 
# function before geom point() instead of after it? 
# What does this tell you about how the plot is drawn?

### geom_point() before geom_smoth() ####
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_point() + geom_smooth() + 
labs(title="HW3 - Q4a", subtitle = "geom_point() before geom_smoth()")

### geom_smooth() before geom_point()   ####
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p +  geom_smooth() + geom_point() +
  labs(title="HW3 - Q4b", subtitle = "geom_smooth() before geom_point() ")

## Question # 5 ####
# TRY SOME ALTERNATIVE SCALE MAPPINGS. 
# BESIDES SCALE X LOG10() YOU CAN TRY SCALE X SQRT() 
# AND SCALE X REVERSE(). 
#THERE ARE CORRESPONDING FUNCTIONS FOR Y-AXIS TRANSFORMATIONS. 
# JUST WRITE Y INSTEAD OF X. 
# WHAT SORT OF EFFECT THEY HAVE ON THE PLOT? 
# WHEN SHOULD THESE SCALES BE USED?

### scale_x_log10 ####
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_point() +
  geom_smooth(method = "gam") +
  scale_x_log10() +
  labs(title = 'HW3 - Q5', subtitle = "scale_x_log10")

### SCALE_X_SQRT() ####
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_point() +
  geom_smooth(method = "gam") +
  scale_x_sqrt() +
  labs(title = 'HW3 - Q5', subtitle = "scale_x_sqrt()")

### scale_x_reverse() ####
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_point() +
  geom_smooth(method = "gam") +
  scale_x_reverse() +
  labs(title = 'HW3 - Q5', subtitle = "scale_x_reverse()")

### scale_y_log10 ####
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_point() +
  geom_smooth(method = "gam") +
  scale_y_log10() +
  labs(title = 'HW3 - Q5', subtitle = "scale_y_log10()")

### SCALE_y_SQRT() ####
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_point() +
  geom_smooth(method = "gam") +
  scale_y_sqrt() +
  labs(title = 'HW3 - Q5', subtitle = "scale_y_sqrt()")

### scale_y_reverse() ####
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_point() +
  geom_smooth(method = "gam") +
  scale_y_reverse() +
  labs(title = 'HW3 - Q5', subtitle = "scale_y_reverse()")

